<?xml version="1.0" encoding="UTF-8"?>
<Grid xmlns="http://xamarin.com/schemas/2014/forms"
      xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
      xmlns:d="http://xamarin.com/schemas/2014/forms/design"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:ext="clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Extensions"
      xmlns:math="clr-namespace:Xamarin.Forms.MathDisplay;assembly=Xamarin.Forms.MathDisplay"
      xmlns:Calculator="clr-namespace:Calculator"
      xmlns:States="clr-namespace:Calculator.States"
      mc:Ignorable="d"
      x:Class="Calculator.CrunchKeyboard"
      x:Name="self">
    <VisualStateManager.VisualStateGroups>
        <VisualStateGroup>
            <VisualState Name="{x:Static Calculator:MainPage.PORTRAIT_MODE}" />
            <VisualState Name="{x:Static Calculator:MainPage.LANDSCAPE_MODE}" />
        </VisualStateGroup>

        <VisualStateGroup Name="{x:Static Calculator:MainPage.PORTRAIT_MODE}">
            <VisualState Name="{x:Static Calculator:MainPage.BASIC_MODE}" />
            <VisualState Name="{x:Static Calculator:CrunchKeyboard.EXPANDED_MODE}" />
        </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>

    <Grid.Resources>
        <Style x:Name="KeyboardKeyStyle"
               x:FieldModifier="public"
               TargetType="Button"
               ApplyToDerivedTypes="True">
            <Style.Setters>
                <Setter Property="BackgroundColor"
                        Value="Transparent" />
                <Setter Property="BorderColor"
                        Value="{DynamicResource SecondaryKeyboardKeyColor}" />
                <Setter Property="BorderWidth"
                        Value="0" />
                <Setter Property="TextColor"
                        Value="{DynamicResource DetailColor}" />
                <Setter Property="CornerRadius"
                        Value="10" />
                <Setter Property="Command"
                        Value="{Binding InputCommand}" />
                <Setter Property="CommandParameter"
                        Value="{Binding Text, Source={RelativeSource Self}}" />
            </Style.Setters>

            <Style.Behaviors>
                <Calculator:ButtonFeedbackBehavior />
            </Style.Behaviors>
        </Style>

        <Style x:Name="OperatorStyle"
               TargetType="Button"
               Class="Operator"
               ApplyToDerivedTypes="True">
            <Style.Setters>
                <Setter Property="BorderColor"
                        Value="DarkOrange" />
            </Style.Setters>
        </Style>

        <Style TargetType="VisualElement"
               Class="RegularOnly"
               ApplyToDerivedTypes="True">
            <Style.Setters>
                <Setter Property="ext:VisualElementAdditions.Visibility"
                        Value="{States:CrunchKeyboard Default=1, Basic=0}" />
            </Style.Setters>
        </Style>

        <Style TargetType="VisualElement"
               Class="BasicOnly"
               ApplyToDerivedTypes="True">
            <Style.Setters>
                <Setter Property="ext:VisualElementAdditions.Visibility"
                        Value="{States:CrunchKeyboard Default=0, Basic=1}" />
            </Style.Setters>
        </Style>

        <Binding x:Key="ColumnsMinus1"
                 Source="{x:Reference self}"
                 Path="ColumnDefinitions.Count"
                 Converter="{x:Static Calculator:CrunchKeyboard.IndexFromEnd}"
                 ConverterParameter="1" />

        <Binding x:Key="RowsMinus1"
                 Source="{x:Reference self}"
                 Path="RowDefinitions.Count"
                 Converter="{x:Static Calculator:CrunchKeyboard.IndexFromEnd}"
                 ConverterParameter="1" />
    </Grid.Resources>

    <Grid.ColumnDefinitions>
        <States:CrunchKeyboard Portrait="1*, 1*, 1*, 1*, 1.25*"
                               Basic="1*, 1*, 1*, 1*"
                               Expanded="1*, 1*, 1*, 1*, 1*, 1*, 1*, 1.25*">
            <States:CrunchKeyboard.Landscape>
                <ColumnDefinitionCollection>
                    <ColumnDefinition Width="{Binding Source={x:Reference self}, Path=VariablesSize}" />
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                </ColumnDefinitionCollection>
            </States:CrunchKeyboard.Landscape>
        </States:CrunchKeyboard>
    </Grid.ColumnDefinitions>

    <Grid.RowDefinitions>
        <States:CrunchKeyboard Basic="1*, 1*, 1*, 1*, 1*"
                               Landscape="1*, 1*, 1*, 1*, 1*">
            <States:CrunchKeyboard.Portrait>
                <RowDefinitionCollection>
                    <RowDefinition Height="{Binding Source={x:Reference self}, Path=VariablesSize}" />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </RowDefinitionCollection>
            </States:CrunchKeyboard.Portrait>
        </States:CrunchKeyboard>
    </Grid.RowDefinitions>

    <Grid x:Name="Variables"
          x:FieldModifier="public"
          Grid.Row="0"
          Grid.Column="0"
          Grid.ColumnSpan="{ext:BindingProvider {States:MainPage Portrait={Binding Source={x:Reference self}, Path=ColumnDefinitions.Count}, Landscape=1, Owner={x:Reference self}}}"
          Grid.RowSpan="{States:MainPage Portrait=1, Landscape={Binding Source={x:Reference self}, Path=RowDefinitions.Count}, Owner={x:Reference self}}">
        <Grid.RowDefinitions>
            <States:MainPage Portrait="1*">
                <States:MainPage.Landscape>
                    <RowDefinitionCollection>
                        <RowDefinition Height="{Binding Source={x:Reference Variables}, Path=Width, Converter={x:Static ext:GridExtensions.CoerceDefinitionValue}}" />
                        <RowDefinition />
                        <RowDefinition Height="{Binding Source={x:Reference Variables}, Path=Width, Converter={x:Static ext:GridExtensions.CoerceDefinitionValue}}" />
                    </RowDefinitionCollection>
                </States:MainPage.Landscape>
            </States:MainPage>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <States:MainPage Landscape="1*">
                <States:MainPage.Portrait>
                    <ColumnDefinitionCollection>
                        <ColumnDefinition Width="{Binding Source={x:Reference Variables}, Path=Height, Converter={x:Static ext:GridExtensions.CoerceDefinitionValue}}" />
                        <ColumnDefinition />
                        <ColumnDefinition Width="{Binding Source={x:Reference Variables}, Path=Height, Converter={x:Static ext:GridExtensions.CoerceDefinitionValue}}" />
                    </ColumnDefinitionCollection>
                </States:MainPage.Portrait>
            </States:MainPage>
        </Grid.ColumnDefinitions>

        <Calculator:LabelButton Grid.Row="0"
                                Grid.Column="0"
                                StyleClass="RegularOnly">
            <x:Arguments>
                <Button x:Name="NextKeyboardButton"
                        Command="{x:Null}"
                        Clicked="NextKeyboardButtonClicked"
                        Text="🌐"
                        FontFamily="{StaticResource SymbolaFont}"
                        FontSize="15" />
            </x:Arguments>
        </Calculator:LabelButton>

        <Calculator:Key x:Name="NewCalculationKey"
                        Text="NEW"
                        Command="{Binding NewCommand}"
                        StyleClass="BasicOnly"
                        Grid.Row="0"
                        Grid.Column="0">
        </Calculator:Key>

        <ScrollView Orientation="Horizontal"
                    Grid.Row="{States:MainPage Portrait=0, Landscape=1, Owner={x:Reference self}}"
                    Grid.Column="{States:MainPage Portrait=1, Landscape=0, Owner={x:Reference self}}">
            <StackLayout x:Name="VariableLayout"
                         Orientation="Horizontal"
                         Spacing="{Binding Source={x:Reference self}, Path=ColumnSpacing}"
                         StyleClass="RegularOnly" />
        </ScrollView>

        <Button x:Name="ExpandButton"
                StyleClass="RegularOnly"
                Text="&#xf104;"
                FontFamily="{StaticResource IoniconsFont}"
                FontSize="15"
                Command="{x:Null}"
                Clicked="DismissButtonClicked"
                Grid.Row="{States:MainPage Portrait=0, Landscape=2, Owner={x:Reference self}}"
                Grid.Column="{States:MainPage Portrait=2, Landscape=0, Owner={x:Reference self}}" />
    </Grid>

    <Button x:Name="ClearButton"
            Text="AC"
            Command="{Binding ClearCommand}"
            StyleClass="BasicOnly"
            Grid.Row="0"
            Grid.Column="1" />

    <Button x:Name="PlusMinus"
            Text="+/-"
            Command="{Binding PlusMinusCommand}"
            StyleClass="BasicOnly"
            Grid.Row="0"
            Grid.Column="2" />

    <ScrollView x:Name="Scroll"
                Orientation="Horizontal"
                Grid.Column="{States:MainPage Portrait=0, Landscape=1, Owner={x:Reference self}}"
                Grid.ColumnSpan="{ext:BindingProvider {States:MainPage Portrait={Calculator:BindingResource ColumnsMinus1}, Landscape={Calculator:BindingResource ColumnsMinus1}, Basic=4}}"
                Grid.Row="{States:MainPage Portrait=1, Landscape=0, Owner={x:Reference self}}"
                Grid.RowSpan="4">
        <Grid x:Name="Keypad"
              ColumnDefinitions="1*, 1*, 1*, 1*, 1*, 1*, 1*"
              RowDefinitions="1*, 1*, 1*, 1*">
            <Grid.Resources>
                <Style TargetType="Calculator:Key"
                       BasedOn="{StaticResource Xamarin.Forms.Button}">
                    <Style.Setters>
                        <Setter Property="BorderColor"
                                Value="{DynamicResource PrimaryKeyboardKeyColor}" />
                    </Style.Setters>
                </Style>

                <Style TargetType="Calculator:Key"
                       Class="DigitKey">
                    <Style.Setters>
                        <Setter Property="Command"
                                Value="{States:MainPage Default={Binding InputCommand}, Basic={Binding DigitCommand}}" />
                    </Style.Setters>
                </Style>

                <Style TargetType="Calculator:Key"
                       Class="Operator"
                       BasedOn="{x:Reference OperatorStyle}">
                    <Style.Setters>
                        <Setter Property="Command"
                                Value="{States:MainPage Default={Binding InputCommand}, Basic={Binding OperationCommand}}" />
                    </Style.Setters>
                </Style>
            </Grid.Resources>

            <Grid.Behaviors>
                <ext:FillGridBehavior FillPattern="Rows" />
            </Grid.Behaviors>

            <Calculator:Key Text="sin" />
            <Calculator:Key Text="10&#8319;"
                            CommandParameter="10^" />
            <Calculator:Key Text="x&#8319;"
                            CommandParameter="^" />
            <Calculator:Key Text="7"
                            StyleClass="DigitKey" />
            <Calculator:Key Text="8"
                            StyleClass="DigitKey" />
            <Calculator:Key Text="9"
                            StyleClass="DigitKey" />
            <Calculator:Key Text="&#247;"
                            CommandParameter="/"
                            StyleClass="Operator" />
            <Calculator:Key Text="cos" />
            <Calculator:Key Text="log"
                            CommandParameter="log_" />
            <Calculator:Key Text="x&#178;"
                            CommandParameter="^2" />
            <Calculator:Key Text="4"
                            StyleClass="DigitKey" />
            <Calculator:Key Text="5"
                            StyleClass="DigitKey" />
            <Calculator:Key Text="6"
                            StyleClass="DigitKey" />
            <Calculator:Key Text="&#215;"
                            CommandParameter="*"
                            StyleClass="Operator" />
            <Calculator:Key Text="tan" />
            <Calculator:Key Text="ln" />
            <Calculator:Key Text="&#8730;"
                            CommandParameter="√" />
            <Calculator:Key Text="1"
                            StyleClass="DigitKey" />
            <Calculator:Key Text="2"
                            StyleClass="DigitKey" />
            <Calculator:Key Text="3"
                            StyleClass="DigitKey" />
            <Calculator:Key Text="-"
                            StyleClass="Operator" />
            <!--pi-->
            <Calculator:Key Text="&#960;" />
            <Calculator:Key Text="e" />
            <Calculator:Key Text="x" />
            <Calculator:Key Text="0"
                            StyleClass="DigitKey" />
            <Calculator:Key Text="."
                            StyleClass="DigitKey" />
            <Grid StyleClass="RegularOnly">
                <Calculator:Key Text="("
                                Grid.Column="0"
                                Grid.Row="0" />
                <Calculator:Key Text=")"
                                Grid.Column="1"
                                Grid.Row="0" />
            </Grid>
            <Calculator:Key Text="+"
                            StyleClass="Operator" />
        </Grid>
    </ScrollView>

    <Calculator:Key x:Name="EqualsKey"
                    Text="="
                    Command="{Binding EnterCommand}"
                    StyleClass="BasicOnly, Operator"
                    Grid.Row="4"
                    Grid.Column="2" />

    <Grid x:Name="Right"
          InputTransparent="{States:MainPage Default=True, Basic=False}"
          ColumnDefinitions="1*"
          RowDefinitions="1*, 1*, 1*, 1*, 1*, 1*, 1*, 1*, 1*, 1*"
          Grid.Row="0"
          Grid.RowSpan="5"
          Grid.Column="3">
    </Grid>

    <Calculator:Key x:Name="BackspaceButton"
                    Text="DEL"
                    Command="{States:MainPage Default={Binding BackspaceCommand}, Basic={Binding BackspaceCommand}}"
                    Grid.Column="{ext:BindingProvider {States:MainPage Portrait={Calculator:BindingResource ColumnsMinus1}, Landscape=1, Owner={x:Reference self}}}"
                    Grid.Row="{States:MainPage Portrait=1, Landscape={Calculator:BindingResource RowsMinus1}, Owner={x:Reference self}}" />

    <Grid x:Name="ArrowKeys"
          Grid.Column="{ext:BindingProvider {States:MainPage Portrait={Calculator:BindingResource ColumnsMinus1}, Landscape=2, Owner={x:Reference self}}}"
          Grid.ColumnSpan="{States:MainPage Portrait=1, Landscape=2}"
          Grid.Row="{States:MainPage Portrait=2, Landscape={Calculator:BindingResource RowsMinus1}, Owner={x:Reference self}}"
          Grid.RowSpan="{States:MainPage Portrait=2, Landscape=1}">
        <Grid.Resources>
            <Style TargetType="Button"
                   ApplyToDerivedTypes="True"
                   BasedOn="{StaticResource Xamarin.Forms.Button}">
                <Style.Setters>
                    <Setter Property="FontFamily"
                            Value="{StaticResource SymbolaFont}" />
                    <Setter Property="Command"
                            Value="{Binding MoveCursorCommand}" />
                </Style.Setters>
            </Style>

            <!--<Style x:Key="RotatedArrowKeyStyle"
                   TargetType="Label">
                <Style.Setters>
                    <Setter Property="Rotation"
                            Value="90" />
                    <Setter Property="HeightRequest"
                            Value="{Binding Width, Source={RelativeSource Self}}" />
                </Style.Setters>
            </Style>-->
        </Grid.Resources>

        <Calculator:LabelButton Grid.Column="{States:MainPage Portrait=0, Landscape=1, Owner={x:Reference self}}"
                                Grid.Row="0"
                                Grid.ColumnSpan="2">
            <x:Arguments>
                <Calculator:Key Text="〈"
                                CommandParameter="{x:Static math:MathEntryViewModel+CursorKey.Up}" />
            </x:Arguments>
        </Calculator:LabelButton>

        <Calculator:Key Text="〈"
                        CommandParameter="{x:Static math:MathEntryViewModel+CursorKey.Left}"
                        Grid.Column="0"
                        Grid.Row="{States:MainPage Portrait=1, Landscape=0, Owner={x:Reference self}}"
                        Grid.RowSpan="2" />

        <Calculator:Key Text="〉"
                        CommandParameter="{x:Static math:MathEntryViewModel+CursorKey.Right}"
                        Grid.Column="{States:MainPage Portrait=1, Landscape=3, Owner={x:Reference self}}"
                        Grid.Row="{States:MainPage Portrait=1, Landscape=0, Owner={x:Reference self}}"
                        Grid.RowSpan="2" />

        <Calculator:LabelButton x:Name="DownArrowKey"
                                Grid.Column="{States:MainPage Portrait=0, Landscape=1, Owner={x:Reference self}}"
                                Grid.Row="{States:MainPage Portrait=3, Landscape=1, Owner={x:Reference self}}"
                                Grid.ColumnSpan="2">
            <x:Arguments>
                <Calculator:Key Text="〉"
                                CommandParameter="{x:Static math:MathEntryViewModel+CursorKey.Down}" />
            </x:Arguments>
        </Calculator:LabelButton>
    </Grid>

    <ContentView x:Name="BottomRight"
                 Grid.Column="{ext:BindingProvider {States:MainPage Portrait={Calculator:BindingResource ColumnsMinus1}, Landscape=4, Owner={x:Reference self}}}"
                 Grid.Row="{States:MainPage Portrait=4, Landscape={Calculator:BindingResource RowsMinus1}, Owner={x:Reference self}}" />

    <ext:LongClickableButton x:Name="DockButton"
                             x:FieldModifier="public"
                             Command="{x:Null}"
                             Text="▽"
                             FontFamily="{StaticResource SymbolaFont}" />

    <ext:LongClickableButton x:Name="ChangeModeButton"
                             Text="&#xf3f2;"
                             Command="{x:Null}"
                             Clicked="ChangeModeButtonClicked"
                             FontFamily="{StaticResource IoniconsFont}" />
</Grid>